// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/19/2016 22:55:22"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          UART_IN
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module UART_IN_vlg_vec_tst();
// constants                                           
// general purpose registers
reg RTS;
reg TX_D;
reg clk;
// wires                                               
wire [7:0] BYTEOUT;
wire CTS;
wire load;
wire newclk;

// assign statements (if any)                          
UART_IN i1 (
// port map - connection between master ports and signals/registers   
	.BYTEOUT(BYTEOUT),
	.CTS(CTS),
	.RTS(RTS),
	.TX_D(TX_D),
	.clk(clk),
	.load(load),
	.newclk(newclk)
);
initial 
begin 
#100000000 $finish;
end 

// TX_D
initial
begin
	TX_D = 1'b1;
	TX_D = #18560000 1'b0;
	TX_D = #3200000 1'b1;
	TX_D = #3200000 1'b0;
	TX_D = #23040000 1'b1;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
endmodule

